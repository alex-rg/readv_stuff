
- name: setup build environment for xrootd
  hosts: localhost
  vars:
    #Remove all build/src directories before build if they exist
    clean_xrdceph_dirs: 1
    clean_xrootd_dirs: 1
    build_xrootd: 1
    build_xrdceph: 0
    xrdceph_package_name: "xrootd-ceph"

    xrootd_repo_url: "https://github.com/alex-rg/xrootd"
    xrdceph_repo_url: "https://github.com/stfc/xrootd-ceph"
    xrootd_branch: "add_redirection"
    xrdceph_branch: "bufferedIO"
    xrootd_version: "5.7.1.redir"
    xrootd_version_simple: "5.7.1"
    xrdceph_version: "5.5.4-10"
    xrootd_commit_hash: 0

    build_dir: /root/build
    src_dir: /root/src
    xrootd_src_dir: "{{src_dir}}/xrootd"
    xrdceph_src_dir: "{{src_dir}}/xrdceph"
    xrootd_build_dir: "{{build_dir}}/xrootd"
    xrdceph_build_dir: "{{build_dir}}/xrdceph"
  tasks:
  - name: clean xrootd directories
    file:
      path: "{{item}}"
      state: absent
    loop: ["{{xrootd_build_dir}}", "{{xrootd_src_dir}}"]
    when: clean_xrootd_dirs == 1

  - name: clean xrdceph directories
    file:
      path: "{{item}}"
      state: absent
    loop: ["{{xrdceph_build_dir}}", "{{xrdceph_src_dir}}"]
    when: clean_xrdceph_dirs == 1

  - name: create necessary dirs
    file:
      path: "{{item}}"
      state: directory
    loop: ["{{xrootd_build_dir}}", "{{xrdceph_build_dir}}", "{{xrootd_src_dir}}", "{{xrdceph_src_dir}}", "{{xrootd_build_dir}}/RPMS"]

#  - name: install ceph repo
#    copy:
#      content: |
#        [ceph-el7-x86_64]
#        name = ceph-el7-x86_64
#        baseurl = http://mirrors.gridpp.rl.ac.uk/current/ceph-el7-x86_64/RPMS.nautilus/
#        metadata_expire = 7d
#        enabled = 1
#        gpgcheck = 0
#        priority = 40
#        skip_if_unavailable = 0
#      dest: /etc/yum.repos.d/ceph.repo
#      owner: root
#      group: root
#      mode: 0644

  - name: CentOS7
    block:
    - name: install build packages
      yum:
        name: "{{item}}"
        state: present
      loop:
      - cmake3
      - git
      - centos-release-scl
      - devtoolset-7
  #    - librados2-devel
  #    - libradospp-devel
  #    - libradosstriper-devel
      - krb5-devel
      - readline-devel
      - fuse-devel
      - libxml2-devel
      - zlib-devel
      - ncurses-devel
      - libcurl-devel
      - libuuid-devel
      - voms-devel
      - libmacaroons-devel
      - json-c-devel
      - python2-devel
      - python3-devel
      - openssl-devel
      - selinux-policy-devel
      - doxygen
      - graphviz
      - systemd-devel
      - rpm-build
      - scitokens-cpp-devel

    - name: build xrootd
      block:
      - name: clone Xrootd repository
        command:
          cmd: git clone -b "{{xrootd_branch}}" "{{xrootd_repo_url}}"
          chdir: "{{xrootd_src_dir}}"

      - name: create srpm
        command:
          cmd: "./makesrpm.sh --version {{xrootd_version}} --define '_with_python3 1' --define '_with_tests 1' --define '_with_scitokens 1' --output {{xrootd_build_dir}}"
          chdir: "{{xrootd_src_dir}}/xrootd/packaging"

      - name: build rpm
        shell:
          cmd: rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_with_python3 1" --define "_with_scitokens 1"  --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" -D "dist .el7"  *.src.rpm
          chdir: "{{xrootd_build_dir}}"
      when: build_xrootd == 1
    when: ansible_distribution_major_version == 7

  - name: EL8
    vars:
      home: "{{ansible_env['HOME']}}"
    block:
    - name: create rpmbuild dirs
      file:
        state: directory
        path: "{{home}}/rpmbuild/{{item}}"
        owner: root
        group: root
        mode: 0755
      loop: ['', 'RPMS', 'SOURCES', 'SPECS']

    - name: install build packages
      dnf:
        name: "{{item}}"
        state: present
        enablerepo: "*devel"
      loop:
      - cppunit-devel
      - davix-devel
      - fuse-devel
      - gtest-devel
      - isa-l-devel
      - json-c-devel
      - libmacaroons-devel
      - perl-generators
      - python3-devel
      - python3-wheel
      - scitokens-cpp-devel
      - selinux-policy-devel
      - systemd-devel
      - tinyxml-devel
      - voms-devel

    - name: clone xrootd repository
      command:
        cmd: git clone -b "{{xrootd_branch}}" "{{xrootd_repo_url}}" .
        chdir: "{{xrootd_src_dir}}"

    - name: select appropriate commit
      command:
        cmd: git reset --hard "{{xrootd_commit_hash}}"
        chdir: "{{xrootd_src_dir}}"
      when: xrootd_commit_hash != 0

    - name: create tarball
      command:
        cmd: "git archive -o {{home}}/rpmbuild/SOURCES/xrootd-{{xrootd_version_simple}}.tar.gz --prefix /xrootd-{{xrootd_version_simple}}/ HEAD"
        chdir: "{{xrootd_src_dir}}"

    - name: copy spec
      copy:
        src: "{{xrootd_src_dir}}/xrootd.spec"
        dest: "{{home}}/rpmbuild/SPECS/xrootd.spec"
        remote_src: true

    - name: install python3.12-devel
      dnf:
        name: python3.12-devel
        state: present

    - name: build rpm
      command:
        cmd: "rpmbuild -ba SPECS/xrootd.spec"
        chdir: "{{home}}/rpmbuild"


  - name: build xrdceph
    block:
    - name: clone XrdCeph repository
      command:
        cmd: git clone -b "{{xrdceph_branch}}" "{{xrdceph_repo_url}}"
        chdir: "{{xrdceph_src_dir}}"

    - name: make sure necessary commits are present
      block:
      - name: set up git name
        shell:
          cmd:  git config --global user.email tmp@somewhere && git config --global user.name somename

      - name: Pick up commits with dependencies and version fixes
        shell:
          cmd: git log | grep -q "{{item}}" || git cherry-pick "{{item}}"
          chdir: "{{xrdceph_src_dir}}/xrootd-ceph"
        loop:
        - afce0f01ad129b8a3e4abd559f0bff0fdbb86317
        - 67a59214f285c92e266cfd2d45d99df120046e1b


    - name: create srpm
      command:
        cmd: "./makesrpm.sh --version {{xrdceph_version}} --output {{xrdceph_build_dir}}"
        chdir: "{{xrdceph_src_dir}}/xrootd-ceph/packaging"

    - name: install srpm
      shell:
        cmd: rpm --root {{xrdceph_build_dir}} -i {{xrdceph_build_dir}}/*.src.rpm

    - name: install xrootd headers
      shell:
        cmd: yum install -y {{xrootd_build_dir}}/RPMS/*devel*.rpm {{xrootd_build_dir}}/RPMS/*libs*.rpm
      failed_when: false

    - name: setup package name
      ansible.builtin.lineinfile:
        path: "{{xrdceph_build_dir}}/root/rpmbuild/SPECS/xrootd-ceph.spec"
        regexp: '^Name: '
        line: "Name:      {{xrdceph_package_name}}"

    - name: build rpm
      shell:
        cmd:  source /opt/rh/devtoolset-7/enable && rpmbuild --define "_topdir {{xrdceph_build_dir}}/root/rpmbuild" --ba --define "_rpmdir RPMS/" "SPECS/xrootd-ceph.spec"
        chdir: "{{xrdceph_build_dir}}/root/rpmbuild"

    - name: copy packages
      copy:
        src: "{{xrdceph_build_dir}}/root/rpmbuild/RPMS"
        dest: "{{xrdceph_build_dir}}"
    when: build_xrdceph == 1
